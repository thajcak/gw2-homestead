name: Update and Fetch Decorations and Categories

on:
  schedule:
    - cron: '0 * * * *' # Runs every hour
  workflow_dispatch: # Allows for manual trigger of the workflow

jobs:
  update-and-fetch-decorations:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install jq and curl for JSON processing
        run: sudo apt-get update && sudo apt-get install -y jq curl

      - name: Fetch Decorations List and Details
        run: |
          # Fetch the list of decoration IDs
          curl -s https://api.guildwars2.com/v2/homestead/decorations -o decorations_list.json

          # Initialize an empty array to store the results
          echo "[]" > decorations.json

          # Split the list into chunks of 200 IDs and fetch details
          ids=$(jq -r '.[]' decorations_list.json)
          chunk_size=200
          for chunk in $(echo "$ids" | xargs -n $chunk_size | sed 's/ /,/g'); do
            curl -s "https://api.guildwars2.com/v2/homestead/decorations?ids=$chunk" | \
            jq -s 'add' >> temp.json
          done

          # Combine all the chunks into a single JSON array
          jq -s 'add' temp.json > decorations.json
          rm temp.json
          rm decorations_list.json

      - name: Fetch Decoration Categories
        run: |
          # Fetch the list of decoration category IDs
          curl -s https://api.guildwars2.com/v2/homestead/decorations/categories -o decoration_categories_list.json

          # Initialize an empty array to store the results
          echo "[]" > decoration_categories.json

          # Split the list into chunks of 200 IDs and fetch details
          category_ids=$(jq -r '.[]' decoration_categories_list.json)
          chunk_size=200
          for chunk in $(echo "$category_ids" | xargs -n $chunk_size | sed 's/ /,/g'); do
            curl -s "https://api.guildwars2.com/v2/homestead/decorations/categories?ids=$chunk" | \
            jq -s 'add' >> temp_categories.json
          done

          # Combine all the chunks into a single JSON array
          jq -s 'add' temp_categories.json > decoration_categories.json
          rm temp_categories.json
          rm decoration_categories_list.json

      - name: Fetch and Update Decorations with Image Data
        run: |
          # Process each decoration directly within jq, avoiding shell misinterpretations
          jq -c '.[]' decorations.json | while IFS= read -r decoration; do

            # Check if 'original' and 'thumbnail' properties are already set
            originalSet=$(echo "$decoration" | jq -r '.original != null and .original != ""')
            thumbnailSet=$(echo "$decoration" | jq -r '.thumbnail != null and .thumbnail != ""')

            # Skip fetching if both 'original' and 'thumbnail' are already set
            if [ "$originalSet" = "true" ] && [ "$thumbnailSet" = "true" ]; then
              echo "Skipping update for decoration: $(echo "$decoration" | jq -r '.name'), URLs already set."
              echo "$decoration" >> updated_decorations.json
              continue
            fi

            # Extract the name and ID fields directly from the decoration
            name=$(echo "$decoration" | jq -r '.name')
            id=$(echo "$decoration" | jq -r '.id')

            # URL encode the decoration name for API requests
            encodedName=$(echo "$name" | jq -Rr @uri)
            titles="${encodedName}%20(Handiwork)|${encodedName}%20Decoration|${encodedName}"
            apiUrl="https://wiki.guildwars2.com/api.php?action=query&titles=${titles}&prop=pageimages&piprop=original|thumbnail&format=json&origin=*"

            # Fetch the primary image data
            imageResponse=$(curl -s "$apiUrl")

            # Validate that the raw response is valid JSON
            if ! echo "$imageResponse" | jq empty; then
              continue # Skip this decoration if the response is invalid
            fi

            # Extract and prioritize the page based on titles
            page=$(echo "$imageResponse" | jq -c '.query.pages | to_entries[] | select(.value.original != null) | .value' | jq 'select(.title | contains("Handiwork")) // select(.title | contains("Decoration")) // .')

            # Extract the wiki title
            wikiTitle=$(echo "$page" | jq -r '.title // empty')

            # Check if valid page data is found
            if [ -n "$page" ]; then
              # Extract the image URLs
              originalUrl=$(echo "$page" | jq -r '.original.source // empty' | tr -d '\n')
              thumbnailUrl=$(echo "$page" | jq -r '.thumbnail.source // empty' | tr -d '\n')

              # Update the decoration object with URLs and wikiTitle if found
              if [ -n "$originalUrl" ]; then
                decoration=$(echo "$decoration" | jq --arg original "$originalUrl" --arg thumbnail "$thumbnailUrl" --arg wikiTitle "$wikiTitle" '. + {original: $original, thumbnail: $thumbnail, wikiTitle: $wikiTitle}')
              fi
            else
              # Fallback: Fetch RDF data if no valid image found
              rdfTitle=$(echo "$name" | sed 's/ /_/g')
              rdfApiUrl="https://corsproxy.io/?$(echo "https://wiki.guildwars2.com/index.php?title=Special:ExportRDF/$rdfTitle" | jq -Rr @uri)"

              rdfResponse=$(curl -s "$rdfApiUrl")
              if [ -n "$rdfResponse" ]; then
                # Extract appearance details from RDF data
                fullFilename=$(echo "$rdfResponse" | grep -oP 'rdf:resource="[^"]*"' | grep 'Has_appearance' | sed -e 's/rdf:resource="//' -e 's/"//')

                if [ -n "$fullFilename" ]; then
                  # Extract file title and create fallback URL
                  filenameTitle=$(basename "$fullFilename" | sed 's/-3A/:/g')
                  fallbackApiUrl="https://wiki.guildwars2.com/api.php?action=query&titles=$(echo "$filenameTitle" | jq -Rr @uri)&prop=pageimages&piprop=original|thumbnail&format=json&origin=*"

                  fallbackResponse=$(curl -s "$fallbackApiUrl")
                  fallbackPage=$(echo "$fallbackResponse" | jq '.query.pages | to_entries[] | select(.value.original != null) | .value')
                  fallbackOriginal=$(echo "$fallbackPage" | jq -r '.original.source // empty' | tr -d '\n')
                  fallbackThumbnail=$(echo "$fallbackPage" | jq -r '.thumbnail.source // empty' | tr -d '\n')
                  fallbackWikiTitle=$(echo "$fallbackPage" | jq -r '.title // empty')

                  # Update decoration with fallback data and wikiTitle
                  if [ -n "$fallbackOriginal" ]; then
                    decoration=$(echo "$decoration" | jq --arg original "$fallbackOriginal" --arg thumbnail "$fallbackThumbnail" --arg wikiTitle "$fallbackWikiTitle" '. + {original: $original, thumbnail: $thumbnail, wikiTitle: $wikiTitle}')
                  fi
                fi
              fi
            fi

            # Append the updated decoration back to the JSON array
            echo "$decoration" >> updated_decorations.json
          done

          # Combine updated decorations into a single JSON array
          jq -s '.' updated_decorations.json > decorations.json
          rm updated_decorations.json

      - name: Commit and push updated decorations and categories
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add decorations.json decoration_categories.json
          # Check if there are changes to commit
          if git diff --cached --quiet; then
            echo "No changes to commit."
          else
            git commit -m "Update decorations.json and decoration_categories.json with detailed data"
            git push
          fi